// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: bidder.proto

package bid

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BrainClient is the client API for Brain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BrainClient interface {
	// get the default period settings
	GetTpsBudget(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Brain_GetTpsBudgetClient, error)
	SetTpsBudget(ctx context.Context, in *TpsBudget, opts ...grpc.CallOption) (*TpsBudget, error)
	GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Brain_GetStatsClient, error)
}

type brainClient struct {
	cc grpc.ClientConnInterface
}

func NewBrainClient(cc grpc.ClientConnInterface) BrainClient {
	return &brainClient{cc}
}

func (c *brainClient) GetTpsBudget(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Brain_GetTpsBudgetClient, error) {
	stream, err := c.cc.NewStream(ctx, &Brain_ServiceDesc.Streams[0], "/bid.Brain/GetTpsBudget", opts...)
	if err != nil {
		return nil, err
	}
	x := &brainGetTpsBudgetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Brain_GetTpsBudgetClient interface {
	Recv() (*TpsBudget, error)
	grpc.ClientStream
}

type brainGetTpsBudgetClient struct {
	grpc.ClientStream
}

func (x *brainGetTpsBudgetClient) Recv() (*TpsBudget, error) {
	m := new(TpsBudget)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *brainClient) SetTpsBudget(ctx context.Context, in *TpsBudget, opts ...grpc.CallOption) (*TpsBudget, error) {
	out := new(TpsBudget)
	err := c.cc.Invoke(ctx, "/bid.Brain/SetTpsBudget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brainClient) GetStats(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Brain_GetStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Brain_ServiceDesc.Streams[1], "/bid.Brain/GetStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &brainGetStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Brain_GetStatsClient interface {
	Recv() (*Stats, error)
	grpc.ClientStream
}

type brainGetStatsClient struct {
	grpc.ClientStream
}

func (x *brainGetStatsClient) Recv() (*Stats, error) {
	m := new(Stats)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BrainServer is the server API for Brain service.
// All implementations must embed UnimplementedBrainServer
// for forward compatibility
type BrainServer interface {
	// get the default period settings
	GetTpsBudget(*Empty, Brain_GetTpsBudgetServer) error
	SetTpsBudget(context.Context, *TpsBudget) (*TpsBudget, error)
	GetStats(*Empty, Brain_GetStatsServer) error
	mustEmbedUnimplementedBrainServer()
}

// UnimplementedBrainServer must be embedded to have forward compatible implementations.
type UnimplementedBrainServer struct {
}

func (UnimplementedBrainServer) GetTpsBudget(*Empty, Brain_GetTpsBudgetServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTpsBudget not implemented")
}
func (UnimplementedBrainServer) SetTpsBudget(context.Context, *TpsBudget) (*TpsBudget, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTpsBudget not implemented")
}
func (UnimplementedBrainServer) GetStats(*Empty, Brain_GetStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedBrainServer) mustEmbedUnimplementedBrainServer() {}

// UnsafeBrainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BrainServer will
// result in compilation errors.
type UnsafeBrainServer interface {
	mustEmbedUnimplementedBrainServer()
}

func RegisterBrainServer(s grpc.ServiceRegistrar, srv BrainServer) {
	s.RegisterService(&Brain_ServiceDesc, srv)
}

func _Brain_GetTpsBudget_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrainServer).GetTpsBudget(m, &brainGetTpsBudgetServer{stream})
}

type Brain_GetTpsBudgetServer interface {
	Send(*TpsBudget) error
	grpc.ServerStream
}

type brainGetTpsBudgetServer struct {
	grpc.ServerStream
}

func (x *brainGetTpsBudgetServer) Send(m *TpsBudget) error {
	return x.ServerStream.SendMsg(m)
}

func _Brain_SetTpsBudget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpsBudget)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrainServer).SetTpsBudget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bid.Brain/SetTpsBudget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrainServer).SetTpsBudget(ctx, req.(*TpsBudget))
	}
	return interceptor(ctx, in, info, handler)
}

func _Brain_GetStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BrainServer).GetStats(m, &brainGetStatsServer{stream})
}

type Brain_GetStatsServer interface {
	Send(*Stats) error
	grpc.ServerStream
}

type brainGetStatsServer struct {
	grpc.ServerStream
}

func (x *brainGetStatsServer) Send(m *Stats) error {
	return x.ServerStream.SendMsg(m)
}

// Brain_ServiceDesc is the grpc.ServiceDesc for Brain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Brain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bid.Brain",
	HandlerType: (*BrainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTpsBudget",
			Handler:    _Brain_SetTpsBudget_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTpsBudget",
			Handler:       _Brain_GetTpsBudget_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetStats",
			Handler:       _Brain_GetStats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bidder.proto",
}
