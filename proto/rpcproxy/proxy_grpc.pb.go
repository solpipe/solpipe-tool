// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: proxy.proto

package rpcproxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JsonRpcClient is the client API for JsonRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JsonRpcClient interface {
	// get the default period settings
	Rpc(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Body, error)
	Ws(ctx context.Context, opts ...grpc.CallOption) (JsonRpc_WsClient, error)
}

type jsonRpcClient struct {
	cc grpc.ClientConnInterface
}

func NewJsonRpcClient(cc grpc.ClientConnInterface) JsonRpcClient {
	return &jsonRpcClient{cc}
}

func (c *jsonRpcClient) Rpc(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Body, error) {
	out := new(Body)
	err := c.cc.Invoke(ctx, "/rpc.JsonRpc/Rpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jsonRpcClient) Ws(ctx context.Context, opts ...grpc.CallOption) (JsonRpc_WsClient, error) {
	stream, err := c.cc.NewStream(ctx, &JsonRpc_ServiceDesc.Streams[0], "/rpc.JsonRpc/Ws", opts...)
	if err != nil {
		return nil, err
	}
	x := &jsonRpcWsClient{stream}
	return x, nil
}

type JsonRpc_WsClient interface {
	Send(*Request) error
	Recv() (*Body, error)
	grpc.ClientStream
}

type jsonRpcWsClient struct {
	grpc.ClientStream
}

func (x *jsonRpcWsClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jsonRpcWsClient) Recv() (*Body, error) {
	m := new(Body)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JsonRpcServer is the server API for JsonRpc service.
// All implementations must embed UnimplementedJsonRpcServer
// for forward compatibility
type JsonRpcServer interface {
	// get the default period settings
	Rpc(context.Context, *Request) (*Body, error)
	Ws(JsonRpc_WsServer) error
	mustEmbedUnimplementedJsonRpcServer()
}

// UnimplementedJsonRpcServer must be embedded to have forward compatible implementations.
type UnimplementedJsonRpcServer struct {
}

func (UnimplementedJsonRpcServer) Rpc(context.Context, *Request) (*Body, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rpc not implemented")
}
func (UnimplementedJsonRpcServer) Ws(JsonRpc_WsServer) error {
	return status.Errorf(codes.Unimplemented, "method Ws not implemented")
}
func (UnimplementedJsonRpcServer) mustEmbedUnimplementedJsonRpcServer() {}

// UnsafeJsonRpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JsonRpcServer will
// result in compilation errors.
type UnsafeJsonRpcServer interface {
	mustEmbedUnimplementedJsonRpcServer()
}

func RegisterJsonRpcServer(s grpc.ServiceRegistrar, srv JsonRpcServer) {
	s.RegisterService(&JsonRpc_ServiceDesc, srv)
}

func _JsonRpc_Rpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JsonRpcServer).Rpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.JsonRpc/Rpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JsonRpcServer).Rpc(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _JsonRpc_Ws_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JsonRpcServer).Ws(&jsonRpcWsServer{stream})
}

type JsonRpc_WsServer interface {
	Send(*Body) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type jsonRpcWsServer struct {
	grpc.ServerStream
}

func (x *jsonRpcWsServer) Send(m *Body) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jsonRpcWsServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JsonRpc_ServiceDesc is the grpc.ServiceDesc for JsonRpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JsonRpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.JsonRpc",
	HandlerType: (*JsonRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rpc",
			Handler:    _JsonRpc_Rpc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ws",
			Handler:       _JsonRpc_Ws_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proxy.proto",
}
