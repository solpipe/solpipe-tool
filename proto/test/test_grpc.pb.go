// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: test.proto

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SandboxClient is the client API for Sandbox service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SandboxClient interface {
	HeartBeat(ctx context.Context, opts ...grpc.CallOption) (Sandbox_HeartBeatClient, error)
	GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SandboxConfig, error)
	PopStaker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Staker, error)
	PopValidator(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Validator, error)
	Airdrop(ctx context.Context, in *AirdropRequest, opts ...grpc.CallOption) (*Empty, error)
	CreateStake(ctx context.Context, in *CreateStakeRequest, opts ...grpc.CallOption) (*Empty, error)
	DelegateStake(ctx context.Context, in *DelegateStakeRequest, opts ...grpc.CallOption) (*Empty, error)
}

type sandboxClient struct {
	cc grpc.ClientConnInterface
}

func NewSandboxClient(cc grpc.ClientConnInterface) SandboxClient {
	return &sandboxClient{cc}
}

func (c *sandboxClient) HeartBeat(ctx context.Context, opts ...grpc.CallOption) (Sandbox_HeartBeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Sandbox_ServiceDesc.Streams[0], "/test.Sandbox/HeartBeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &sandboxHeartBeatClient{stream}
	return x, nil
}

type Sandbox_HeartBeatClient interface {
	Send(*Empty) error
	Recv() (*Empty, error)
	grpc.ClientStream
}

type sandboxHeartBeatClient struct {
	grpc.ClientStream
}

func (x *sandboxHeartBeatClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sandboxHeartBeatClient) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sandboxClient) GetConfig(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SandboxConfig, error) {
	out := new(SandboxConfig)
	err := c.cc.Invoke(ctx, "/test.Sandbox/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) PopStaker(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Staker, error) {
	out := new(Staker)
	err := c.cc.Invoke(ctx, "/test.Sandbox/PopStaker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) PopValidator(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Validator, error) {
	out := new(Validator)
	err := c.cc.Invoke(ctx, "/test.Sandbox/PopValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) Airdrop(ctx context.Context, in *AirdropRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/test.Sandbox/Airdrop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) CreateStake(ctx context.Context, in *CreateStakeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/test.Sandbox/CreateStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sandboxClient) DelegateStake(ctx context.Context, in *DelegateStakeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/test.Sandbox/DelegateStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SandboxServer is the server API for Sandbox service.
// All implementations must embed UnimplementedSandboxServer
// for forward compatibility
type SandboxServer interface {
	HeartBeat(Sandbox_HeartBeatServer) error
	GetConfig(context.Context, *Empty) (*SandboxConfig, error)
	PopStaker(context.Context, *Empty) (*Staker, error)
	PopValidator(context.Context, *Empty) (*Validator, error)
	Airdrop(context.Context, *AirdropRequest) (*Empty, error)
	CreateStake(context.Context, *CreateStakeRequest) (*Empty, error)
	DelegateStake(context.Context, *DelegateStakeRequest) (*Empty, error)
	mustEmbedUnimplementedSandboxServer()
}

// UnimplementedSandboxServer must be embedded to have forward compatible implementations.
type UnimplementedSandboxServer struct {
}

func (UnimplementedSandboxServer) HeartBeat(Sandbox_HeartBeatServer) error {
	return status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedSandboxServer) GetConfig(context.Context, *Empty) (*SandboxConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedSandboxServer) PopStaker(context.Context, *Empty) (*Staker, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopStaker not implemented")
}
func (UnimplementedSandboxServer) PopValidator(context.Context, *Empty) (*Validator, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PopValidator not implemented")
}
func (UnimplementedSandboxServer) Airdrop(context.Context, *AirdropRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Airdrop not implemented")
}
func (UnimplementedSandboxServer) CreateStake(context.Context, *CreateStakeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStake not implemented")
}
func (UnimplementedSandboxServer) DelegateStake(context.Context, *DelegateStakeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateStake not implemented")
}
func (UnimplementedSandboxServer) mustEmbedUnimplementedSandboxServer() {}

// UnsafeSandboxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SandboxServer will
// result in compilation errors.
type UnsafeSandboxServer interface {
	mustEmbedUnimplementedSandboxServer()
}

func RegisterSandboxServer(s grpc.ServiceRegistrar, srv SandboxServer) {
	s.RegisterService(&Sandbox_ServiceDesc, srv)
}

func _Sandbox_HeartBeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SandboxServer).HeartBeat(&sandboxHeartBeatServer{stream})
}

type Sandbox_HeartBeatServer interface {
	Send(*Empty) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type sandboxHeartBeatServer struct {
	grpc.ServerStream
}

func (x *sandboxHeartBeatServer) Send(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sandboxHeartBeatServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Sandbox_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Sandbox/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).GetConfig(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_PopStaker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).PopStaker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Sandbox/PopStaker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).PopStaker(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_PopValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).PopValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Sandbox/PopValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).PopValidator(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_Airdrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirdropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).Airdrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Sandbox/Airdrop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).Airdrop(ctx, req.(*AirdropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_CreateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).CreateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Sandbox/CreateStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).CreateStake(ctx, req.(*CreateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sandbox_DelegateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SandboxServer).DelegateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Sandbox/DelegateStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SandboxServer).DelegateStake(ctx, req.(*DelegateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Sandbox_ServiceDesc is the grpc.ServiceDesc for Sandbox service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sandbox_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.Sandbox",
	HandlerType: (*SandboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConfig",
			Handler:    _Sandbox_GetConfig_Handler,
		},
		{
			MethodName: "PopStaker",
			Handler:    _Sandbox_PopStaker_Handler,
		},
		{
			MethodName: "PopValidator",
			Handler:    _Sandbox_PopValidator_Handler,
		},
		{
			MethodName: "Airdrop",
			Handler:    _Sandbox_Airdrop_Handler,
		},
		{
			MethodName: "CreateStake",
			Handler:    _Sandbox_CreateStake_Handler,
		},
		{
			MethodName: "DelegateStake",
			Handler:    _Sandbox_DelegateStake_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HeartBeat",
			Handler:       _Sandbox_HeartBeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "test.proto",
}
